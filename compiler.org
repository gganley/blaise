* Compiler project stages

** Step 1
*** Write the BNF for mini-Pascal:
- program
- vars
- functions
- procedures
- if
- while
- for
- assignment
- expressions

*** Write a lexical analyzer for mini-Pascal:
goes through, pulls out reserved words & replaces with symbols, puts var names in symbol table

** Step 2
*** Write a syntactic analyzer for mini-Pascal
**** should
- read lexical analyzer output
- determine if any syntax errors and what type of error
- produce MIPS assembly code runnable on SPIM
**** handles: 
- program
- integer and boolean vars
- writeln
- readln

** Step 3
*** Write an expression parser
**** should:
- determine whether expression is syntactically valid
- handle numbers, symbols, (), +, -, =, <, >, <>
- turn expression into series of single operation steps w. temp vars

*** Add expressions and assignment to syntactic analyzer
**** should
- assignment
- expressions

** Step 4
*** Add a semantic analyzer for mini-Pascal
should recognize boolean/integer type-mismatches

** Step 5
*** Add to syntactic analyzer:
- if statements
- while loops
- for loops

** Step 6
*** Add to syntactic analyzer:
- procedures
- functions


* BNF for mini-Pascal
#+BEGIN_SRC
<program> ::= PROGRAM <name> ; [<varpart>] {<subprogram>} BEGIN [<statements>] END.

<name> ::= <letter> {<letter>} {<number>}
<letter> ::= [A-Z]
<number> ::= [0-9]

<varpart> ::= VAR <vars>+
<vars> ::= <varstatement>+
<varstatement> ::= <vardef> ;
<vardef> ::= <name> {, <name>} : <type>
<type> ::= BOOLEAN | INTEGER


<subprogram> ::= <procedure> | <function>

<function> ::= FUNCTION <name> [<parampart>] : <type> ; [<varpart>] BEGIN [<statements>] END;

<procedure> ::= PROCEDURE <name> [<parampart>] ; [<varpart>] BEGIN [<statements>] END;
<parampart> ::= ( <vardef> {, <vardef>} )
<statements> ::= {<statement>}
<statement> ::= <if-statement> | <for-statement> | <while-statement> | <assignment-statement> |
		<procedure-call> | <writeln-statement>
<if-statement> ::= IF <expression> THEN BEGIN [<statements>] END; [<else-clause>]
<for-statement> ::= FOR <name> := <integer> TO <integer> DO BEGIN [<statements>] END; 
<writeln-statement> ::= WRITELN ( <atom> ) ;
<assignment-statement> ::= <name> := <expression> ;
<while-statement> ::= WHILE <expression> DO BEGIN [<statements>] END;

<expression> ::= <atom> | <subexpression> | <operation>
<operation> ::= <expression> <operator> <expression>
<operator> ::= + | - | = | <> | < | > | <= | =>
<subexpression> ::= ( <expression> )
<atom> ::= <name> | <integer> | <boolean>
<boolean> ::= TRUE | FALSE
<else-clause> ::= ELSE BEGIN [<statements>] END;
<integer> ::= [<minus>] <number> {<number>}
<minus> ::= -

#+END_SRC



* Reserved words
PROGRAM
BEGIN
END;
END.
VAR
BOOLEAN
INTEGER
PROCEDURE
FUNCTION
IF
THEN
ELSE
FOR
TO
DO
WHILE
TRUE
FALSE
WRITELN
